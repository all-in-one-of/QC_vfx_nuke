set cut_paste_input [stack 0]
version 10.0 v4
BackdropNode {
 inputs 0
 name " CG _backdrop1"
 tile_color 0x3e4f5aff
 label " CG "
 note_font_size 48
 selected true
 xpos 471
 ypos -82
 icon Shaders.png
 bdwidth 140
 bdheight 170
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T " CG _backdrop1.label"}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
BackdropNode {
 inputs 0
 name BackdropNode1
 tile_color 0x41353fff
 note_font_size 48
 selected true
 xpos 681
 ypos -191
 bdwidth 97
 bdheight 157
 addUserKnob {20 mainTabTK l backdropTK}
 addUserKnob {41 label_1 l label T BackdropNode1.label}
 addUserKnob {22 rndClrs0 l "<font style=\"background-color:#3e4f5a\"> <img size=\"8\" src=\"Shaders.png\"> CG </font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Shaders.png')\nR,G,B= \[0.567, 0.301, 0.353]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' CG ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' CG '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndClrs1 l "<font style=\"background-color:#3d3228\"> <img size=\"8\" src=\"Light.png\"> FX </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Light.png')\nR,G,B= \[0.079, 0.34, 0.242]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' FX ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' FX '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs2 l "<font style=\"background-color:#2e202f\"> <img size=\"8\" src=\"Geometry.png\"> 3D </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Geometry.png')\nR,G,B= \[0.822, 0.312, 0.188]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' 3D ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' 3D '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs3 l "<font style=\"background-color:#384937\"> <img size=\"8\" src=\"Keyer.png\"> Key </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Keyer.png')\nR,G,B= \[0.333, 0.243, 0.29]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Key ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Key '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs4 l "<font style=\"background-color:#403b52\"> <img size=\"8\" src=\"FloodFill.png\">Cleanup</font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('FloodFill.png')\nR,G,B= \[0.703, 0.28, 0.322]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Cleanup')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Cleanup'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs5 l "<font style=\"background-color:#787048\"> <img size=\"8\" src=\"Read.png\"> Ref </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Read.png')\nR,G,B= \[0.138, 0.404, 0.474]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Ref ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Ref '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs6 l "<font style=\"background-color:#67754a\"> <img size=\"8\" src=\"Vectorfield.png\"> Pub </font>" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Vectorfield.png')\nR,G,B= \[0.221, 0.368, 0.46]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue(' Pub ')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % ' Pub '\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))"}
 addUserKnob {22 rndClrs7 l "<font style=\"background-color:#a65fcc\"> <img size=\"8\" src=\"Glow.png\">Important!</font>" T "import colorsys\nn=nuke.thisNode()\nlist=\[u' CG ', u' FX ', u' 3D ', u' Key ', u'Cleanup', u' Ref ', u' Pub ', u'Important!']\nn\['icon'].setValue('Glow.png')\nR,G,B= \[0.776, 0.533, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\nif ((n\['label'].getValue()=='') or (n\['label'].getValue() in list)):\n   n\['label'].setValue('Important!')\n\nallnodes=nuke.allNodes()\nlist=\[]\nnd_name='%s_backdrop' % 'Important!'\ncurName=n\['name'].getValue().split(nd_name)\n\nif ((len(curName)>0) and (not curName\[0]=='')):\n    for nd in allnodes:\n        splt=nd.name().split(nd_name)\n        if (len(splt)>1):\n            num=splt\[1]\n            if num.isdigit():\n                list.append(int(num))\n    if len(list)>0:\n        next=int(sorted(list)\[-1])+1 \n    else: next=1\n    n\['name'].setValue('%s%s' % (nd_name,next))" +STARTLINE}
 addUserKnob {22 rndColors l " <img src=\"ColorBars.png\">Randomize color " T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )" +STARTLINE}
 addUserKnob {22 rndTint l " <img src=\"HueShift.png\">Randomize tint " -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nV=int(n\['tile_color'].getValue())\nR = (0xFF & V >> 24) / 255.0\nG = (0xFF & V >> 16) / 255.0\nB = (0xFF & V >> 8) / 255.0\n\nR,G,B= colorsys.rgb_to_hsv(R,G,B)\n\nR,G,B= colorsys.hsv_to_rgb(R,.1+random.random()*.15,.15+random.random()*.15)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ) )"}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Grow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" -STARTLINE T "n=nuke.thisNode()\nautoBackdrop.Shrink(n,50)"}
 addUserKnob {20 version}
 addUserKnob {26 nodeClass l Class: T backdropTK}
 addUserKnob {26 nodeVersion l Version: T "v 2.1"}
 addUserKnob {22 chHelp l "<img src=\":qrc/images/Help.png\"> HELP" t "Opens web page with tool's manual" -STARTLINE T "nukescripts.openurl.start (tk.getHelpUrl(nuke.thisNode()))"}
}
StickyNote {
 inputs 0
 name StickyNote2
 label scenes
 selected true
 xpos 692
 ypos -164
}
StickyNote {
 inputs 0
 name StickyNote1
 label "in1\nmotionvector"
 selected true
 xpos 500
 ypos -29
}
Shuffle {
 inputs 0
 name Shuffle1
 selected true
 xpos 497
 ypos 51
}
push $cut_paste_input
Dot {
 name Dot1
 selected true
 xpos 724
 ypos -70
}
add_layer {motionvector motionvector.red motionvector.green motionvector.blue}
Copy {
 inputs 2
 from0 rgba.red
 to0 motionvector.red
 from1 rgba.green
 to1 motionvector.green
 from2 rgba.blue
 to2 motionvector.blue
 name Copy1
 selected true
 xpos 690
 ypos 32
}
VectorBlur {
 uv motionvector
 alpha rgba.alpha
 name VectorBlur1
 selected true
 xpos 690
 ypos 141
}
